initSidebarItems({"fn":[["send_receive","Sends `msg` to `destination` and simultaneously receives an instance of `R` from `source`."],["send_receive_into","Sends the contents of `msg` to `destination` and simultaneously receives a message from `source` into `buf`."],["send_receive_into_with_tags","Sends the contents of `msg` to `destination` tagging it `sendtag` and simultaneously receives a message tagged `receivetag` from `source` into `buf`."],["send_receive_replace_into","Sends the contents of `buf` to `destination` and simultaneously receives a message from `source` and replaces the contents of `buf` with it."],["send_receive_replace_into_with_tags","Sends the contents of `buf` to `destination` tagging it `sendtag` and simultaneously receives a message tagged `receivetag` from `source` and replaces the contents of `buf` with it."],["send_receive_with_tags","Sends `msg` to `destination` tagging it `sendtag` and simultaneously receives an instance of `R` tagged `receivetag` from `source`."]],"mod":[["traits","Point to point communication traits"]],"struct":[["Message","Describes a pending incoming message, probed by a `matched_probe()`."],["ReceiveFuture","Will contain a value of type `T` received via a non-blocking receive operation."],["Status","Describes the result of a point to point receive operation."]],"trait":[["Destination","Something that can be used as the destination in a point to point send operation"],["MatchedReceiveVec","Receive a previously probed message containing multiple instances of type `Msg` into a `Vec`."],["Source","Something that can be used as the source in a point to point receive operation"]]});