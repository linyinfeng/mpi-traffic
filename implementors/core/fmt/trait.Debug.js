(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Debug + StateID&gt; Debug for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;Debug + 'a + StateID&gt; Debug for FindIter&lt;'a, 'b, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;Debug + 'a + StateID&gt; Debug for FindOverlappingIter&lt;'a, 'b, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug, S:&nbsp;Debug + 'a + StateID&gt; Debug for StreamFindIter&lt;'a, R, S&gt;","synthetic":false,"types":[]},{"text":"impl Debug for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Debug for MatchKind","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for MatchKind","synthetic":false,"types":[]},{"text":"impl Debug for Config","synthetic":false,"types":[]},{"text":"impl Debug for Builder","synthetic":false,"types":[]},{"text":"impl Debug for Searcher","synthetic":false,"types":[]},{"text":"impl&lt;'s, 'h&gt; Debug for FindIter&lt;'s, 'h&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Match","synthetic":false,"types":[]}];
implementors["andrew"] = [{"text":"impl Debug for Sides","synthetic":false,"types":[]},{"text":"impl Debug for Endian","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Debug for Prefix","synthetic":false,"types":[]},{"text":"impl Debug for Infix","synthetic":false,"types":[]},{"text":"impl Debug for Suffix","synthetic":false,"types":[]},{"text":"impl Debug for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + 'a + ToOwned + ?Sized&gt; Debug for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Style","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Debug for Stream","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Debug for Config","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Debug for PodCastError","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Debug for BigEndian","synthetic":false,"types":[]},{"text":"impl Debug for LittleEndian","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Debug for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Shell","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["conv"] = [{"text":"impl&lt;T&gt; Debug for GeneralError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for GeneralErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for NoError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Unrepresentable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for NegOverflow&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for PosOverflow&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for FloatError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for RangeError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RangeErrorKind","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Debug for Hasher","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Debug for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Debug for TryIter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RecvError","synthetic":false,"types":[]},{"text":"impl Debug for TryRecvError","synthetic":false,"types":[]},{"text":"impl Debug for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Debug for TrySelectError","synthetic":false,"types":[]},{"text":"impl Debug for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Debug for TryReadyError","synthetic":false,"types":[]},{"text":"impl Debug for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Select&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for SelectedOperation&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Debug for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Injector&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T:&nbsp;'g, P:&nbsp;Pointer&lt;T&gt; + Debug&gt; Debug for CompareAndSetError&lt;'g, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g, T&gt; Debug for Shared&lt;'g, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Collector","synthetic":false,"types":[]},{"text":"impl Debug for LocalHandle","synthetic":false,"types":[]},{"text":"impl Debug for Guard","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy + Debug&gt; Debug for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Backoff","synthetic":false,"types":[]},{"text":"impl Debug for Parker","synthetic":false,"types":[]},{"text":"impl Debug for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Debug&gt; Debug for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for WaitGroup","synthetic":false,"types":[]},{"text":"impl&lt;'env&gt; Debug for Scope&lt;'env&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, 'env: 'scope&gt; Debug for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Debug for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Debug for Compression","synthetic":false,"types":[]},{"text":"impl Debug for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Debug for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Debug for MatchingType","synthetic":false,"types":[]}];
implementors["draw_state"] = [{"text":"impl Debug for FrontFace","synthetic":false,"types":[]},{"text":"impl Debug for Offset","synthetic":false,"types":[]},{"text":"impl Debug for CullFace","synthetic":false,"types":[]},{"text":"impl Debug for RasterMethod","synthetic":false,"types":[]},{"text":"impl Debug for MultiSample","synthetic":false,"types":[]},{"text":"impl Debug for Rasterizer","synthetic":false,"types":[]},{"text":"impl Debug for Comparison","synthetic":false,"types":[]},{"text":"impl Debug for StencilOp","synthetic":false,"types":[]},{"text":"impl Debug for StencilSide","synthetic":false,"types":[]},{"text":"impl Debug for Stencil","synthetic":false,"types":[]},{"text":"impl Debug for Depth","synthetic":false,"types":[]},{"text":"impl Debug for Equation","synthetic":false,"types":[]},{"text":"impl Debug for BlendValue","synthetic":false,"types":[]},{"text":"impl Debug for Factor","synthetic":false,"types":[]},{"text":"impl Debug for BlendChannel","synthetic":false,"types":[]},{"text":"impl Debug for Blend","synthetic":false,"types":[]},{"text":"impl Debug for ColorMask","synthetic":false,"types":[]},{"text":"impl Debug for Color","synthetic":false,"types":[]},{"text":"impl Debug for RefValues","synthetic":false,"types":[]},{"text":"impl Debug for Rect","synthetic":false,"types":[]},{"text":"impl Debug for Mirror","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Debug, R:&nbsp;Debug&gt; Debug for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Debug for Filter","synthetic":false,"types":[]},{"text":"impl Debug for Builder","synthetic":false,"types":[]},{"text":"impl Debug for Timestamp","synthetic":false,"types":[]},{"text":"impl Debug for Style","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for StyledValue&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Color","synthetic":false,"types":[]},{"text":"impl Debug for Target","synthetic":false,"types":[]},{"text":"impl Debug for WriteStyle","synthetic":false,"types":[]},{"text":"impl Debug for TimestampPrecision","synthetic":false,"types":[]},{"text":"impl Debug for Formatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Env&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Logger","synthetic":false,"types":[]},{"text":"impl Debug for Builder","synthetic":false,"types":[]}];
implementors["event_loop"] = [{"text":"impl Debug for EventSettings","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["gfx"] = [{"text":"impl&lt;S:&nbsp;Debug, D:&nbsp;Debug&gt; Debug for CopyError&lt;S, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for UpdateError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources, C:&nbsp;Debug&gt; Debug for Encoder&lt;R, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for PipelineStateError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Slice&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for IndexBuffer&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, I&gt; Debug for VertexBufferCommon&lt;T, I&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RawVertexBuffer","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Structure&lt;ConstFormat&gt;&gt; Debug for ConstantBuffer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RawConstantBuffer","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ToUniform&gt; Debug for Global&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RawGlobal","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for ShaderResource&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RawShaderResource","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for UnorderedAccess&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Sampler","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for TextureSampler&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for RenderTarget&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for BlendTarget&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for RawRenderTarget","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for DepthTarget&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for StencilTarget&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for DepthStencilTarget&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Scissor","synthetic":false,"types":[]},{"text":"impl Debug for BlendRef","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawDataSet&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for ElementError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for InitError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources, M:&nbsp;Debug&gt; Debug for PipelineState&lt;R, M&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ProgramError","synthetic":false,"types":[]}];
implementors["gfx_core"] = [{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Raw&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Buffer: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Role","synthetic":false,"types":[]},{"text":"impl Debug for Info","synthetic":false,"types":[]},{"text":"impl Debug for CreationError","synthetic":false,"types":[]},{"text":"impl Debug for ClearColor","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for AccessInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + Resources&gt; Debug for AccessGuard&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + Resources&gt; Debug for AccessGuardBuffers&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + Resources&gt; Debug for AccessGuardBuffersChain&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for DummyResources","synthetic":false,"types":[]},{"text":"impl Debug for DummyFence","synthetic":false,"types":[]},{"text":"impl Debug for DummyMapping","synthetic":false,"types":[]},{"text":"impl Debug for ResourceViewError","synthetic":false,"types":[]},{"text":"impl Debug for TargetViewError","synthetic":false,"types":[]},{"text":"impl Debug for CombinedError","synthetic":false,"types":[]},{"text":"impl Debug for ChannelType","synthetic":false,"types":[]},{"text":"impl Debug for Int","synthetic":false,"types":[]},{"text":"impl Debug for Uint","synthetic":false,"types":[]},{"text":"impl Debug for Inorm","synthetic":false,"types":[]},{"text":"impl Debug for Unorm","synthetic":false,"types":[]},{"text":"impl Debug for Float","synthetic":false,"types":[]},{"text":"impl Debug for Srgb","synthetic":false,"types":[]},{"text":"impl Debug for SurfaceType","synthetic":false,"types":[]},{"text":"impl Debug for R4_G4","synthetic":false,"types":[]},{"text":"impl Debug for R4_G4_B4_A4","synthetic":false,"types":[]},{"text":"impl Debug for R5_G5_B5_A1","synthetic":false,"types":[]},{"text":"impl Debug for R5_G6_B5","synthetic":false,"types":[]},{"text":"impl Debug for R8","synthetic":false,"types":[]},{"text":"impl Debug for R8_G8","synthetic":false,"types":[]},{"text":"impl Debug for R8_G8_B8_A8","synthetic":false,"types":[]},{"text":"impl Debug for R10_G10_B10_A2","synthetic":false,"types":[]},{"text":"impl Debug for R11_G11_B10","synthetic":false,"types":[]},{"text":"impl Debug for R16","synthetic":false,"types":[]},{"text":"impl Debug for R16_G16","synthetic":false,"types":[]},{"text":"impl Debug for R16_G16_B16","synthetic":false,"types":[]},{"text":"impl Debug for R16_G16_B16_A16","synthetic":false,"types":[]},{"text":"impl Debug for R32","synthetic":false,"types":[]},{"text":"impl Debug for R32_G32","synthetic":false,"types":[]},{"text":"impl Debug for R32_G32_B32","synthetic":false,"types":[]},{"text":"impl Debug for R32_G32_B32_A32","synthetic":false,"types":[]},{"text":"impl Debug for B8_G8_R8_A8","synthetic":false,"types":[]},{"text":"impl Debug for D16","synthetic":false,"types":[]},{"text":"impl Debug for D24","synthetic":false,"types":[]},{"text":"impl Debug for D24_S8","synthetic":false,"types":[]},{"text":"impl Debug for D32","synthetic":false,"types":[]},{"text":"impl Debug for BC1_R8_G8_B8","synthetic":false,"types":[]},{"text":"impl Debug for BC3_R8_G8_B8_A8","synthetic":false,"types":[]},{"text":"impl Debug for ChannelSource","synthetic":false,"types":[]},{"text":"impl Debug for Swizzle","synthetic":false,"types":[]},{"text":"impl Debug for Format","synthetic":false,"types":[]},{"text":"impl Debug for U8Norm","synthetic":false,"types":[]},{"text":"impl Debug for I8Norm","synthetic":false,"types":[]},{"text":"impl Debug for U16Norm","synthetic":false,"types":[]},{"text":"impl Debug for I16Norm","synthetic":false,"types":[]},{"text":"impl Debug for F16","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawBuffer&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for Buffer&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Shader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Shader: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Program&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawPipelineState&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::PipelineStateObject: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawTexture&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for Texture&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawShaderResourceView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::ShaderResourceView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for ShaderResourceView&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawUnorderedAccessView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::UnorderedAccessView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for UnorderedAccessView&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawRenderTargetView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::RenderTargetView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for RawDepthStencilView&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::DepthStencilView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for RenderTargetView&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Resources, T&gt; Debug for DepthStencilView&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Sampler&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Sampler: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Fence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Fence: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Manager&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Shader: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::PipelineStateObject: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::ShaderResourceView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::UnorderedAccessView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::RenderTargetView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::DepthStencilView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Sampler: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Fence: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + Resources, T:&nbsp;Debug + 'a + Copy&gt; Debug for Reader&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + Resources, T:&nbsp;Debug + 'a + Copy&gt; Debug for Writer&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Usage","synthetic":false,"types":[]},{"text":"impl Debug for Access","synthetic":false,"types":[]},{"text":"impl Debug for Bind","synthetic":false,"types":[]},{"text":"impl Debug for CreationError","synthetic":false,"types":[]},{"text":"impl Debug for ColorInfo","synthetic":false,"types":[]},{"text":"impl Debug for DepthStencilInfo","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Debug&gt; Debug for Element&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl Debug for VertexBufferDesc","synthetic":false,"types":[]},{"text":"impl Debug for Descriptor","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for VertexBufferSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Buffer: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for ConstantBufferParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Buffer: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for ResourceViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::ShaderResourceView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for UnorderedViewParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::UnorderedAccessView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for SamplerParam&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Sampler: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for PixelTargetSet&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::RenderTargetView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::DepthStencilView: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::DepthStencilView: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for IsArray","synthetic":false,"types":[]},{"text":"impl Debug for IsComparison","synthetic":false,"types":[]},{"text":"impl Debug for IsMultiSample","synthetic":false,"types":[]},{"text":"impl Debug for IsRect","synthetic":false,"types":[]},{"text":"impl Debug for MatrixFormat","synthetic":false,"types":[]},{"text":"impl Debug for TextureType","synthetic":false,"types":[]},{"text":"impl Debug for SamplerType","synthetic":false,"types":[]},{"text":"impl Debug for BaseType","synthetic":false,"types":[]},{"text":"impl Debug for ContainerType","synthetic":false,"types":[]},{"text":"impl Debug for Stage","synthetic":false,"types":[]},{"text":"impl Debug for UniformValue","synthetic":false,"types":[]},{"text":"impl Debug for Usage","synthetic":false,"types":[]},{"text":"impl Debug for AttributeVar","synthetic":false,"types":[]},{"text":"impl Debug for ConstVar","synthetic":false,"types":[]},{"text":"impl Debug for ConstantBufferVar","synthetic":false,"types":[]},{"text":"impl Debug for TextureVar","synthetic":false,"types":[]},{"text":"impl Debug for UnorderedVar","synthetic":false,"types":[]},{"text":"impl Debug for SamplerVar","synthetic":false,"types":[]},{"text":"impl Debug for OutputVar","synthetic":false,"types":[]},{"text":"impl Debug for ProgramInfo","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Program&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Program: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for CompatibilityError","synthetic":false,"types":[]},{"text":"impl Debug for CreateShaderError","synthetic":false,"types":[]},{"text":"impl Debug for CreateProgramError","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for Raw&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Texture: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for CreationError","synthetic":false,"types":[]},{"text":"impl Debug for LayerError","synthetic":false,"types":[]},{"text":"impl Debug for AaMode","synthetic":false,"types":[]},{"text":"impl Debug for FilterMethod","synthetic":false,"types":[]},{"text":"impl Debug for CubeFace","synthetic":false,"types":[]},{"text":"impl Debug for Kind","synthetic":false,"types":[]},{"text":"impl Debug for Mipmap","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Debug&gt; Debug for ImageInfoCommon&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for TextureCopyRegion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for WrapMode","synthetic":false,"types":[]},{"text":"impl Debug for Lod","synthetic":false,"types":[]},{"text":"impl Debug for PackedColor","synthetic":false,"types":[]},{"text":"impl Debug for SamplerInfo","synthetic":false,"types":[]},{"text":"impl Debug for Info","synthetic":false,"types":[]},{"text":"impl Debug for ResourceDesc","synthetic":false,"types":[]},{"text":"impl Debug for RenderDesc","synthetic":false,"types":[]},{"text":"impl Debug for DepthStencilFlags","synthetic":false,"types":[]},{"text":"impl Debug for DepthStencilDesc","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for VertexShader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for HullShader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for DomainShader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for GeometryShader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for PixelShader&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + Resources&gt; Debug for ShaderSet&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Capabilities","synthetic":false,"types":[]},{"text":"impl Debug for Primitive","synthetic":false,"types":[]},{"text":"impl Debug for IndexType","synthetic":false,"types":[]},{"text":"impl Debug for SubmissionError","synthetic":false,"types":[]},{"text":"impl Debug for AdapterInfo","synthetic":false,"types":[]},{"text":"impl Debug for Frame","synthetic":false,"types":[]}];
implementors["gfx_device_gl"] = [{"text":"impl Debug for Version","synthetic":false,"types":[]},{"text":"impl Debug for PlatformName","synthetic":false,"types":[]},{"text":"impl Debug for Info","synthetic":false,"types":[]},{"text":"impl Debug for Fence","synthetic":false,"types":[]},{"text":"impl Debug for Resources","synthetic":false,"types":[]},{"text":"impl Debug for BufferElement","synthetic":false,"types":[]},{"text":"impl Debug for OutputMerger","synthetic":false,"types":[]},{"text":"impl Debug for PipelineState","synthetic":false,"types":[]},{"text":"impl Debug for NewTexture","synthetic":false,"types":[]},{"text":"impl Debug for ResourceView","synthetic":false,"types":[]},{"text":"impl Debug for FatSampler","synthetic":false,"types":[]},{"text":"impl Debug for TargetView","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["gfx_texture"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Flip","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug&gt; Debug for Texture&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Resources,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["gif"] = [{"text":"impl Debug for DisposalMethod","synthetic":false,"types":[]},{"text":"impl Debug for Block","synthetic":false,"types":[]},{"text":"impl Debug for AnyExtension","synthetic":false,"types":[]},{"text":"impl Debug for Extension","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Frame&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for DecodingFormatError","synthetic":false,"types":[]},{"text":"impl Debug for DecodingError","synthetic":false,"types":[]},{"text":"impl Debug for Extensions","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Decoded&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ColorOutput","synthetic":false,"types":[]},{"text":"impl Debug for MemoryLimit","synthetic":false,"types":[]},{"text":"impl Debug for DecodeOptions","synthetic":false,"types":[]},{"text":"impl Debug for EncodingError","synthetic":false,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T:&nbsp;Debug + ContextCurrentState&gt; Debug for Context&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for PossiblyCurrent","synthetic":false,"types":[]},{"text":"impl Debug for NotCurrent","synthetic":false,"types":[]},{"text":"impl Debug for RawHandle","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + ContextCurrentState, W:&nbsp;Debug&gt; Debug for ContextWrapper&lt;T, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + ContextCurrentState&gt; Debug for ContextBuilder&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for CreationError","synthetic":false,"types":[]},{"text":"impl Debug for ContextError","synthetic":false,"types":[]},{"text":"impl Debug for Api","synthetic":false,"types":[]},{"text":"impl Debug for GlProfile","synthetic":false,"types":[]},{"text":"impl Debug for GlRequest","synthetic":false,"types":[]},{"text":"impl Debug for Robustness","synthetic":false,"types":[]},{"text":"impl Debug for ReleaseBehavior","synthetic":false,"types":[]},{"text":"impl Debug for PixelFormat","synthetic":false,"types":[]},{"text":"impl Debug for PixelFormatRequirements","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for GlAttributes&lt;S&gt;","synthetic":false,"types":[]}];
implementors["graphics"] = [{"text":"impl Debug for DrawState","synthetic":false,"types":[]},{"text":"impl Debug for Blend","synthetic":false,"types":[]},{"text":"impl Debug for Stencil","synthetic":false,"types":[]},{"text":"impl Debug for Grid","synthetic":false,"types":[]},{"text":"impl Debug for GridCells","synthetic":false,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl Debug for Version","synthetic":false,"types":[]},{"text":"impl Debug for UnsupportedGraphicsApiError","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for FormattedDuration","synthetic":false,"types":[]},{"text":"impl Debug for Duration","synthetic":false,"types":[]},{"text":"impl Debug for Timestamp","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Rfc3339Timestamp","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Debug for ImageError","synthetic":false,"types":[]},{"text":"impl Debug for UnsupportedError","synthetic":false,"types":[]},{"text":"impl Debug for UnsupportedErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for EncodingError","synthetic":false,"types":[]},{"text":"impl Debug for ParameterError","synthetic":false,"types":[]},{"text":"impl Debug for ParameterErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for DecodingError","synthetic":false,"types":[]},{"text":"impl Debug for LimitError","synthetic":false,"types":[]},{"text":"impl Debug for LimitErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for ImageFormatHint","synthetic":false,"types":[]},{"text":"impl Debug for Rect","synthetic":false,"types":[]},{"text":"impl Debug for FilterType","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Debug&gt; Debug for FlatSamples&lt;Buffer&gt;","synthetic":false,"types":[]},{"text":"impl Debug for SampleLayout","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Debug, P:&nbsp;Debug + Pixel&gt; Debug for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsRef&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Debug, P:&nbsp;Debug + Pixel&gt; Debug for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsMut&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for NormalForm","synthetic":false,"types":[]},{"text":"impl Debug for DXTVariant","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + BufRead&gt; Debug for HdrAdapter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug&gt; Debug for HdrDecoder&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Rgbe8Pixel","synthetic":false,"types":[]},{"text":"impl Debug for HdrMetadata","synthetic":false,"types":[]},{"text":"impl Debug for PixelDensityUnit","synthetic":false,"types":[]},{"text":"impl Debug for PixelDensity","synthetic":false,"types":[]},{"text":"impl Debug for CompressionType","synthetic":false,"types":[]},{"text":"impl Debug for FilterType","synthetic":false,"types":[]},{"text":"impl Debug for SampleEncoding","synthetic":false,"types":[]},{"text":"impl Debug for PNMSubtype","synthetic":false,"types":[]},{"text":"impl Debug for BitmapHeader","synthetic":false,"types":[]},{"text":"impl Debug for GraymapHeader","synthetic":false,"types":[]},{"text":"impl Debug for PixmapHeader","synthetic":false,"types":[]},{"text":"impl Debug for ArbitraryHeader","synthetic":false,"types":[]},{"text":"impl Debug for ArbitraryTuplType","synthetic":false,"types":[]},{"text":"impl Debug for Frame","synthetic":false,"types":[]},{"text":"impl Debug for Delay","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for Pixels&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for PixelsMut&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for Rows&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for RowsMut&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for EnumeratePixels&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for EnumerateRows&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for EnumeratePixelsMut&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Debug for EnumerateRowsMut&lt;'_, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Debug + Pixel, Container:&nbsp;Debug&gt; Debug for ImageBuffer&lt;P, Container&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ColorType","synthetic":false,"types":[]},{"text":"impl Debug for ExtendedColorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for Rgb&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for Bgr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for Luma&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for Rgba&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for Bgra&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Primitive&gt; Debug for LumaA&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ImageFormat","synthetic":false,"types":[]},{"text":"impl Debug for ImageOutputFormat","synthetic":false,"types":[]},{"text":"impl Debug for Progress","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Debug + ?Sized + 'a&gt; Debug for Pixels&lt;'a, I&gt;","synthetic":false,"types":[]}];
implementors["input"] = [{"text":"impl Debug for ControllerButton","synthetic":false,"types":[]},{"text":"impl Debug for ControllerHat","synthetic":false,"types":[]},{"text":"impl Debug for ControllerAxisArgs","synthetic":false,"types":[]},{"text":"impl Debug for ModifierKey","synthetic":false,"types":[]},{"text":"impl Debug for Key","synthetic":false,"types":[]},{"text":"impl Debug for MouseButton","synthetic":false,"types":[]},{"text":"impl Debug for EventId","synthetic":false,"types":[]},{"text":"impl Debug for AfterRenderArgs","synthetic":false,"types":[]},{"text":"impl Debug for ButtonState","synthetic":false,"types":[]},{"text":"impl Debug for ButtonArgs","synthetic":false,"types":[]},{"text":"impl Debug for CloseArgs","synthetic":false,"types":[]},{"text":"impl Debug for IdleArgs","synthetic":false,"types":[]},{"text":"impl Debug for RenderArgs","synthetic":false,"types":[]},{"text":"impl Debug for ResizeArgs","synthetic":false,"types":[]},{"text":"impl Debug for Touch","synthetic":false,"types":[]},{"text":"impl Debug for TouchArgs","synthetic":false,"types":[]},{"text":"impl Debug for UpdateArgs","synthetic":false,"types":[]},{"text":"impl Debug for Button","synthetic":false,"types":[]},{"text":"impl Debug for Motion","synthetic":false,"types":[]},{"text":"impl Debug for HatState","synthetic":false,"types":[]},{"text":"impl Debug for FileDrag","synthetic":false,"types":[]},{"text":"impl Debug for Input","synthetic":false,"types":[]},{"text":"impl Debug for Loop","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Debug for PixelFormat","synthetic":false,"types":[]},{"text":"impl Debug for ImageInfo","synthetic":false,"types":[]},{"text":"impl Debug for UnsupportedFeature","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["libffi"] = [{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Type&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Arg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Type","synthetic":false,"types":[]},{"text":"impl Debug for Builder","synthetic":false,"types":[]},{"text":"impl Debug for Arg","synthetic":false,"types":[]},{"text":"impl Debug for Cif","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Closure&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ClosureOnce","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for CodePtr","synthetic":false,"types":[]}];
implementors["libffi_sys"] = [{"text":"impl Debug for _ffi_type","synthetic":false,"types":[]},{"text":"impl Debug for ffi_cif","synthetic":false,"types":[]},{"text":"impl Debug for ffi_closure","synthetic":false,"types":[]},{"text":"impl Debug for ffi_raw_closure","synthetic":false,"types":[]},{"text":"impl Debug for ffi_java_raw_closure","synthetic":false,"types":[]}];
implementors["libloading"] = [{"text":"impl Debug for Library","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for Symbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Library","synthetic":false,"types":[]},{"text":"impl&lt;'lib, T&gt; Debug for Symbol&lt;'lib, T&gt;","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T:&nbsp;?Sized + Debug&gt; Debug for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T:&nbsp;?Sized + Debug&gt; Debug for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T:&nbsp;?Sized + Debug&gt; Debug for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Debug + ?Sized + 'a&gt; Debug for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Debug for Level","synthetic":false,"types":[]},{"text":"impl Debug for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for RecordBuilder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Debug for ParseLevelError","synthetic":false,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R:&nbsp;Debug + BitReader&gt; Debug for Decoder&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug + BitReader&gt; Debug for DecoderEarlyChange&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for LsbReader","synthetic":false,"types":[]},{"text":"impl Debug for MsbReader","synthetic":false,"types":[]}];
implementors["memmap"] = [{"text":"impl Debug for MmapOptions","synthetic":false,"types":[]},{"text":"impl Debug for Mmap","synthetic":false,"types":[]},{"text":"impl Debug for MmapMut","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Debug for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Debug for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Debug for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Debug for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Debug for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Debug for MZFlush","synthetic":false,"types":[]},{"text":"impl Debug for MZStatus","synthetic":false,"types":[]},{"text":"impl Debug for MZError","synthetic":false,"types":[]},{"text":"impl Debug for DataFormat","synthetic":false,"types":[]},{"text":"impl Debug for StreamResult","synthetic":false,"types":[]}];
implementors["mpi"] = [{"text":"impl&lt;'a&gt; Debug for UserOperation&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for UnsafeUserOperation","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for DatatypeRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for DynBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for DynBufferMut&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Threading","synthetic":false,"types":[]},{"text":"impl Debug for Status","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + Scope&lt;'a&gt;&gt; Debug for Request&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + Scope&lt;'a&gt;&gt; Debug for WaitGuard&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + Scope&lt;'a&gt;&gt; Debug for CancelGuard&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl Debug for StaticScope","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for LocalScope&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Color","synthetic":false,"types":[]},{"text":"impl Debug for CommunicatorRelation","synthetic":false,"types":[]},{"text":"impl Debug for GroupRelation","synthetic":false,"types":[]}];
implementors["mpi_sys"] = [{"text":"impl Debug for ompi_communicator_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_datatype_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_errhandler_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_file_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_group_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_info_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_op_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_request_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_message_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_win_t","synthetic":false,"types":[]},{"text":"impl Debug for mca_base_var_enum_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_mpit_cvar_handle_t","synthetic":false,"types":[]},{"text":"impl Debug for mca_base_pvar_handle_t","synthetic":false,"types":[]},{"text":"impl Debug for mca_base_pvar_session_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_status_public_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_communicator_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_group_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_request_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_message_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_op_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_datatype_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_errhandler_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_win_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_file_t","synthetic":false,"types":[]},{"text":"impl Debug for ompi_predefined_info_t","synthetic":false,"types":[]}];
implementors["mpi_traffic"] = [{"text":"impl Debug for CommunicationError","synthetic":false,"types":[]},{"text":"impl Debug for Division","synthetic":false,"types":[]},{"text":"impl Debug for Road","synthetic":false,"types":[]},{"text":"impl Debug for Lane","synthetic":false,"types":[]},{"text":"impl Debug for ProcessLocalState","synthetic":false,"types":[]},{"text":"impl Debug for Controller","synthetic":false,"types":[]},{"text":"impl Debug for ControllerSettings","synthetic":false,"types":[]},{"text":"impl Debug for UpdateController","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Info","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug, R:&nbsp;Debug&gt; Debug for Board&lt;I, R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for TurnRule","synthetic":false,"types":[]},{"text":"impl Debug for AbsoluteDirection","synthetic":false,"types":[]},{"text":"impl Debug for RelativeDirection","synthetic":false,"types":[]},{"text":"impl Debug for AxisDirection","synthetic":false,"types":[]},{"text":"impl Debug for LaneDirection","synthetic":false,"types":[]},{"text":"impl Debug for InOutDirection","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Around&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Geometry","synthetic":false,"types":[]},{"text":"impl Debug for Position","synthetic":false,"types":[]},{"text":"impl Debug for StatelessModelGenerationSettings","synthetic":false,"types":[]},{"text":"impl Debug for ModelGenerationSettings","synthetic":false,"types":[]},{"text":"impl Debug for Car","synthetic":false,"types":[]},{"text":"impl Debug for Location","synthetic":false,"types":[]},{"text":"impl Debug for Intersection","synthetic":false,"types":[]},{"text":"impl Debug for SwitchState","synthetic":false,"types":[]},{"text":"impl Debug for City","synthetic":false,"types":[]},{"text":"impl Debug for Model","synthetic":false,"types":[]},{"text":"impl Debug for Car","synthetic":false,"types":[]},{"text":"impl Debug for DrivingModel","synthetic":false,"types":[]},{"text":"impl Debug for Intersection","synthetic":false,"types":[]},{"text":"impl Debug for TJunctionRule","synthetic":false,"types":[]},{"text":"impl Debug for SwitchRule","synthetic":false,"types":[]},{"text":"impl Debug for Road","synthetic":false,"types":[]},{"text":"impl Debug for Lane","synthetic":false,"types":[]},{"text":"impl Debug for City","synthetic":false,"types":[]},{"text":"impl Debug for Model","synthetic":false,"types":[]},{"text":"impl Debug for Model","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Matrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for View","synthetic":false,"types":[]},{"text":"impl Debug for ViewSettings","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Debug for Dir","synthetic":false,"types":[]},{"text":"impl&lt;'d&gt; Debug for Iter&lt;'d&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Type","synthetic":false,"types":[]},{"text":"impl Debug for Entry","synthetic":false,"types":[]},{"text":"impl Debug for Errno","synthetic":false,"types":[]},{"text":"impl Debug for AtFlags","synthetic":false,"types":[]},{"text":"impl Debug for OFlag","synthetic":false,"types":[]},{"text":"impl Debug for SealFlag","synthetic":false,"types":[]},{"text":"impl Debug for FdFlag","synthetic":false,"types":[]},{"text":"impl Debug for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Debug for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Debug for InterfaceAddress","synthetic":false,"types":[]},{"text":"impl Debug for InterfaceAddressIterator","synthetic":false,"types":[]},{"text":"impl Debug for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Debug for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Debug for MsFlags","synthetic":false,"types":[]},{"text":"impl Debug for MntFlags","synthetic":false,"types":[]},{"text":"impl Debug for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Debug for FdFlag","synthetic":false,"types":[]},{"text":"impl Debug for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Debug for PollFd","synthetic":false,"types":[]},{"text":"impl Debug for PollFlags","synthetic":false,"types":[]},{"text":"impl Debug for ForkptyResult","synthetic":false,"types":[]},{"text":"impl Debug for PtyMaster","synthetic":false,"types":[]},{"text":"impl Debug for CloneFlags","synthetic":false,"types":[]},{"text":"impl Debug for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Debug for LioOpcode","synthetic":false,"types":[]},{"text":"impl Debug for LioMode","synthetic":false,"types":[]},{"text":"impl Debug for AioCancelStat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Buffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for AioCb&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for LioCb&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for EpollFlags","synthetic":false,"types":[]},{"text":"impl Debug for EpollOp","synthetic":false,"types":[]},{"text":"impl Debug for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Debug for EfdFlags","synthetic":false,"types":[]},{"text":"impl Debug for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Debug for ProtFlags","synthetic":false,"types":[]},{"text":"impl Debug for MapFlags","synthetic":false,"types":[]},{"text":"impl Debug for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Debug for MsFlags","synthetic":false,"types":[]},{"text":"impl Debug for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Debug for Request","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]},{"text":"impl Debug for Options","synthetic":false,"types":[]},{"text":"impl Debug for QuotaType","synthetic":false,"types":[]},{"text":"impl Debug for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Debug for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Debug for RebootMode","synthetic":false,"types":[]},{"text":"impl Debug for Signal","synthetic":false,"types":[]},{"text":"impl Debug for SaFlags","synthetic":false,"types":[]},{"text":"impl Debug for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Debug for SigHandler","synthetic":false,"types":[]},{"text":"impl Debug for SigevNotify","synthetic":false,"types":[]},{"text":"impl Debug for SigEvent","synthetic":false,"types":[]},{"text":"impl Debug for SfdFlags","synthetic":false,"types":[]},{"text":"impl Debug for SignalFd","synthetic":false,"types":[]},{"text":"impl Debug for AddressFamily","synthetic":false,"types":[]},{"text":"impl Debug for InetAddr","synthetic":false,"types":[]},{"text":"impl Debug for IpAddr","synthetic":false,"types":[]},{"text":"impl Debug for Ipv4Addr","synthetic":false,"types":[]},{"text":"impl Debug for Ipv6Addr","synthetic":false,"types":[]},{"text":"impl Debug for UnixAddr","synthetic":false,"types":[]},{"text":"impl Debug for SockAddr","synthetic":false,"types":[]},{"text":"impl Debug for NetlinkAddr","synthetic":false,"types":[]},{"text":"impl Debug for AlgAddr","synthetic":false,"types":[]},{"text":"impl Debug for LinkAddr","synthetic":false,"types":[]},{"text":"impl Debug for ReuseAddr","synthetic":false,"types":[]},{"text":"impl Debug for ReusePort","synthetic":false,"types":[]},{"text":"impl Debug for TcpNoDelay","synthetic":false,"types":[]},{"text":"impl Debug for Linger","synthetic":false,"types":[]},{"text":"impl Debug for IpAddMembership","synthetic":false,"types":[]},{"text":"impl Debug for IpDropMembership","synthetic":false,"types":[]},{"text":"impl Debug for Ipv6AddMembership","synthetic":false,"types":[]},{"text":"impl Debug for Ipv6DropMembership","synthetic":false,"types":[]},{"text":"impl Debug for IpMulticastTtl","synthetic":false,"types":[]},{"text":"impl Debug for IpMulticastLoop","synthetic":false,"types":[]},{"text":"impl Debug for ReceiveTimeout","synthetic":false,"types":[]},{"text":"impl Debug for SendTimeout","synthetic":false,"types":[]},{"text":"impl Debug for Broadcast","synthetic":false,"types":[]},{"text":"impl Debug for OobInline","synthetic":false,"types":[]},{"text":"impl Debug for SocketError","synthetic":false,"types":[]},{"text":"impl Debug for KeepAlive","synthetic":false,"types":[]},{"text":"impl Debug for PeerCredentials","synthetic":false,"types":[]},{"text":"impl Debug for TcpKeepIdle","synthetic":false,"types":[]},{"text":"impl Debug for RcvBuf","synthetic":false,"types":[]},{"text":"impl Debug for SndBuf","synthetic":false,"types":[]},{"text":"impl Debug for RcvBufForce","synthetic":false,"types":[]},{"text":"impl Debug for SndBufForce","synthetic":false,"types":[]},{"text":"impl Debug for SockType","synthetic":false,"types":[]},{"text":"impl Debug for AcceptConn","synthetic":false,"types":[]},{"text":"impl Debug for OriginalDst","synthetic":false,"types":[]},{"text":"impl Debug for ReceiveTimestamp","synthetic":false,"types":[]},{"text":"impl Debug for IpTransparent","synthetic":false,"types":[]},{"text":"impl Debug for Mark","synthetic":false,"types":[]},{"text":"impl Debug for PassCred","synthetic":false,"types":[]},{"text":"impl Debug for TcpCongestion","synthetic":false,"types":[]},{"text":"impl Debug for Ipv4PacketInfo","synthetic":false,"types":[]},{"text":"impl Debug for Ipv6RecvPacketInfo","synthetic":false,"types":[]},{"text":"impl Debug for AlgSetAeadAuthSize","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for AlgSetKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for SockType","synthetic":false,"types":[]},{"text":"impl Debug for SockProtocol","synthetic":false,"types":[]},{"text":"impl Debug for SockFlag","synthetic":false,"types":[]},{"text":"impl Debug for MsgFlags","synthetic":false,"types":[]},{"text":"impl Debug for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Debug for IpMembershipRequest","synthetic":false,"types":[]},{"text":"impl Debug for Ipv6MembershipRequest","synthetic":false,"types":[]},{"text":"impl Debug for SockLevel","synthetic":false,"types":[]},{"text":"impl Debug for Shutdown","synthetic":false,"types":[]},{"text":"impl Debug for SFlag","synthetic":false,"types":[]},{"text":"impl Debug for Mode","synthetic":false,"types":[]},{"text":"impl Debug for FchmodatFlags","synthetic":false,"types":[]},{"text":"impl Debug for UtimensatFlags","synthetic":false,"types":[]},{"text":"impl Debug for FsFlags","synthetic":false,"types":[]},{"text":"impl Debug for BaudRate","synthetic":false,"types":[]},{"text":"impl Debug for SetArg","synthetic":false,"types":[]},{"text":"impl Debug for FlushArg","synthetic":false,"types":[]},{"text":"impl Debug for FlowArg","synthetic":false,"types":[]},{"text":"impl Debug for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Debug for InputFlags","synthetic":false,"types":[]},{"text":"impl Debug for OutputFlags","synthetic":false,"types":[]},{"text":"impl Debug for ControlFlags","synthetic":false,"types":[]},{"text":"impl Debug for LocalFlags","synthetic":false,"types":[]},{"text":"impl Debug for TimeSpec","synthetic":false,"types":[]},{"text":"impl Debug for TimeVal","synthetic":false,"types":[]},{"text":"impl Debug for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Debug for WaitStatus","synthetic":false,"types":[]},{"text":"impl Debug for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Debug for InitFlags","synthetic":false,"types":[]},{"text":"impl Debug for Inotify","synthetic":false,"types":[]},{"text":"impl Debug for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Debug for InotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for Uid","synthetic":false,"types":[]},{"text":"impl Debug for Gid","synthetic":false,"types":[]},{"text":"impl Debug for Pid","synthetic":false,"types":[]},{"text":"impl Debug for ForkResult","synthetic":false,"types":[]},{"text":"impl Debug for FchownatFlags","synthetic":false,"types":[]},{"text":"impl Debug for Whence","synthetic":false,"types":[]},{"text":"impl Debug for PathconfVar","synthetic":false,"types":[]},{"text":"impl Debug for SysconfVar","synthetic":false,"types":[]},{"text":"impl Debug for AccessFlags","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ParseRatioError","synthetic":false,"types":[]}];
implementors["num_traits"] = [{"text":"impl Debug for FloatErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for ParseFloatError","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Debug + Float&gt; Debug for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Float&gt; Debug for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Debug for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Debug for Condvar","synthetic":false,"types":[]},{"text":"impl Debug for OnceState","synthetic":false,"types":[]},{"text":"impl Debug for Once","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Debug for ParkResult","synthetic":false,"types":[]},{"text":"impl Debug for UnparkResult","synthetic":false,"types":[]},{"text":"impl Debug for RequeueOp","synthetic":false,"types":[]},{"text":"impl Debug for FilterOp","synthetic":false,"types":[]},{"text":"impl Debug for UnparkToken","synthetic":false,"types":[]},{"text":"impl Debug for ParkToken","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Debug for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Debug for ColorType","synthetic":false,"types":[]},{"text":"impl Debug for BitDepth","synthetic":false,"types":[]},{"text":"impl Debug for PixelDimensions","synthetic":false,"types":[]},{"text":"impl Debug for Unit","synthetic":false,"types":[]},{"text":"impl Debug for DisposeOp","synthetic":false,"types":[]},{"text":"impl Debug for BlendOp","synthetic":false,"types":[]},{"text":"impl Debug for FrameControl","synthetic":false,"types":[]},{"text":"impl Debug for AnimationControl","synthetic":false,"types":[]},{"text":"impl Debug for Compression","synthetic":false,"types":[]},{"text":"impl Debug for Info","synthetic":false,"types":[]},{"text":"impl Debug for Transformations","synthetic":false,"types":[]},{"text":"impl Debug for Decoded","synthetic":false,"types":[]},{"text":"impl Debug for DecodingError","synthetic":false,"types":[]},{"text":"impl Debug for OutputInfo","synthetic":false,"types":[]},{"text":"impl Debug for Limits","synthetic":false,"types":[]},{"text":"impl Debug for EncodingError","synthetic":false,"types":[]},{"text":"impl Debug for FilterType","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Debug for TokenStream","synthetic":false,"types":[]},{"text":"impl Debug for LexError","synthetic":false,"types":[]},{"text":"impl Debug for Span","synthetic":false,"types":[]},{"text":"impl Debug for TokenTree","synthetic":false,"types":[]},{"text":"impl Debug for Delimiter","synthetic":false,"types":[]},{"text":"impl Debug for Group","synthetic":false,"types":[]},{"text":"impl Debug for Spacing","synthetic":false,"types":[]},{"text":"impl Debug for Punct","synthetic":false,"types":[]},{"text":"impl Debug for Ident","synthetic":false,"types":[]},{"text":"impl Debug for Literal","synthetic":false,"types":[]},{"text":"impl Debug for IntoIter","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Debug for Level","synthetic":false,"types":[]},{"text":"impl Debug for Diagnostic","synthetic":false,"types":[]},{"text":"impl Debug for SpanRange","synthetic":false,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X:&nbsp;Debug, E:&nbsp;Debug&gt; Debug for Context&lt;X, E&gt;","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Debug for Bernoulli","synthetic":false,"types":[]},{"text":"impl Debug for BernoulliError","synthetic":false,"types":[]},{"text":"impl Debug for Binomial","synthetic":false,"types":[]},{"text":"impl Debug for Cauchy","synthetic":false,"types":[]},{"text":"impl Debug for Dirichlet","synthetic":false,"types":[]},{"text":"impl Debug for Exp1","synthetic":false,"types":[]},{"text":"impl Debug for Exp","synthetic":false,"types":[]},{"text":"impl Debug for Gamma","synthetic":false,"types":[]},{"text":"impl Debug for ChiSquared","synthetic":false,"types":[]},{"text":"impl Debug for FisherF","synthetic":false,"types":[]},{"text":"impl Debug for StudentT","synthetic":false,"types":[]},{"text":"impl Debug for Beta","synthetic":false,"types":[]},{"text":"impl Debug for StandardNormal","synthetic":false,"types":[]},{"text":"impl Debug for Normal","synthetic":false,"types":[]},{"text":"impl Debug for LogNormal","synthetic":false,"types":[]},{"text":"impl Debug for Pareto","synthetic":false,"types":[]},{"text":"impl Debug for Poisson","synthetic":false,"types":[]},{"text":"impl Debug for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Debug + SampleUniform&gt; Debug for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Debug&gt; Debug for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Debug&gt; Debug for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Debug for UniformDuration","synthetic":false,"types":[]},{"text":"impl Debug for UnitCircle","synthetic":false,"types":[]},{"text":"impl Debug for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Debug for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Debug for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Debug + SampleUniform + PartialOrd&gt; Debug for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for WeightedError","synthetic":false,"types":[]},{"text":"impl Debug for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Debug for Open01","synthetic":false,"types":[]},{"text":"impl Debug for Alphanumeric","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Debug, R:&nbsp;Debug, T:&nbsp;Debug&gt; Debug for DistIter&lt;D, R, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug&gt; Debug for ReadRng&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ReadError","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug, Rsdr:&nbsp;Debug&gt; Debug for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for EntropyRng","synthetic":false,"types":[]},{"text":"impl Debug for StepRng","synthetic":false,"types":[]},{"text":"impl Debug for StdRng","synthetic":false,"types":[]},{"text":"impl Debug for ThreadRng","synthetic":false,"types":[]},{"text":"impl Debug for IndexVec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for IndexVecIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for IndexVecIntoIter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + ?Sized + 'a, T:&nbsp;Debug + 'a&gt; Debug for SliceChooseIter&lt;'a, S, T&gt;","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Debug for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Debug for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Debug for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Debug for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Debug for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Debug for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;BlockRngCore + Debug&gt; Debug for BlockRng&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;BlockRngCore + Debug&gt; Debug for BlockRng64&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for OsRng","synthetic":false,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl Debug for XlibHandle","synthetic":false,"types":[]},{"text":"impl Debug for XcbHandle","synthetic":false,"types":[]},{"text":"impl Debug for WaylandHandle","synthetic":false,"types":[]},{"text":"impl Debug for RawWindowHandle","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Debug + Ord + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Ord + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Ord + Send&gt; Debug for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Debug + Ord + Send, V:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Debug + Ord + Sync, V:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Debug + Ord + Sync, V:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Ord + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Ord + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Debug + Hash + Eq + Send, V:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Debug + Hash + Eq + Sync, V:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Debug + Hash + Eq + Sync, V:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Debug + Hash + Eq + Send, V:&nbsp;Debug + Send&gt; Debug for Drain&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Hash + Eq + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Hash + Eq + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Hash + Eq + Send&gt; Debug for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Send&gt; Debug for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug, B:&nbsp;Debug&gt; Debug for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ParallelIterator&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug&gt; Debug for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for Copied&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Debug for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + IndexedParallelIterator&gt; Debug for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, P&gt; Debug for Filter&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, P&gt; Debug for FilterMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, F&gt; Debug for FlatMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, F&gt; Debug for FlatMapIter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for Flatten&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for FlattenIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, ID, F&gt; Debug for Fold&lt;I, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, U:&nbsp;Debug, F&gt; Debug for FoldWith&lt;I, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, F&gt; Debug for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug, J:&nbsp;Debug&gt; Debug for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug, J:&nbsp;Debug&gt; Debug for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug&gt; Debug for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + IndexedParallelIterator&gt; Debug for MinLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + IndexedParallelIterator&gt; Debug for MaxLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, F&gt; Debug for Map&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, T:&nbsp;Debug, F&gt; Debug for MapWith&lt;I, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, INIT, F&gt; Debug for MapInit&lt;I, INIT, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for MultiZip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for PanicFuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Iter:&nbsp;Debug&gt; Debug for IterBridge&lt;Iter&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;IndexedParallelIterator + Debug, P&gt; Debug for Positions&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Clone + Send&gt; Debug for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Clone + Send&gt; Debug for RepeatN&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + IndexedParallelIterator&gt; Debug for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug&gt; Debug for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Debug, S&gt; Debug for Split&lt;D, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug&gt; Debug for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U, I:&nbsp;ParallelIterator + Debug, ID, F&gt; Debug for TryFold&lt;I, U, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, U:&nbsp;Try, F&gt; Debug for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;ParallelIterator + Debug, F&gt; Debug for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + ParallelIterator&gt; Debug for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug + IndexedParallelIterator, B:&nbsp;Debug + IndexedParallelIterator&gt; Debug for Zip&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug + IndexedParallelIterator, B:&nbsp;Debug + IndexedParallelIterator&gt; Debug for ZipEq&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug + IndexedParallelIterator&gt; Debug for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Sync&gt; Debug for Iter&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Sync&gt; Debug for Chunks&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Sync&gt; Debug for ChunksExact&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Sync&gt; Debug for Windows&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Send&gt; Debug for IterMut&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Send&gt; Debug for ChunksMut&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Send&gt; Debug for ChunksExactMut&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug, P&gt; Debug for Split&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug, P&gt; Debug for SplitMut&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for Chars&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for CharIndices&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for Bytes&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for EncodeUtf16&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Debug + Pattern&gt; Debug for Split&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Debug + Pattern&gt; Debug for SplitTerminator&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for Lines&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Debug for SplitWhitespace&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Debug + Pattern&gt; Debug for Matches&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Debug + Pattern&gt; Debug for MatchIndices&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Drain&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + Send&gt; Debug for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Debug + Send&gt; Debug for Drain&lt;'data, T&gt;","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Debug for ThreadBuilder","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Debug for Scope&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Debug for ScopeFifo&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ThreadPool","synthetic":false,"types":[]},{"text":"impl Debug for ThreadPoolBuildError","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Debug for ThreadPoolBuilder&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Configuration","synthetic":false,"types":[]},{"text":"impl Debug for FnContext","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Debug for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Regex","synthetic":false,"types":[]},{"text":"impl Debug for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Debug for Captures&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + ?Sized + 'a&gt; Debug for ReplacerRef&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Debug for SetMatches","synthetic":false,"types":[]},{"text":"impl Debug for RegexSet","synthetic":false,"types":[]},{"text":"impl Debug for SetMatches","synthetic":false,"types":[]},{"text":"impl Debug for RegexSet","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Debug for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Regex","synthetic":false,"types":[]},{"text":"impl Debug for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Debug for Captures&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Debug + ?Sized + 'a&gt; Debug for ReplacerRef&lt;'a, R&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Debug for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Debug for Parser","synthetic":false,"types":[]},{"text":"impl Debug for Printer","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for Span","synthetic":false,"types":[]},{"text":"impl Debug for Position","synthetic":false,"types":[]},{"text":"impl Debug for WithComments","synthetic":false,"types":[]},{"text":"impl Debug for Comment","synthetic":false,"types":[]},{"text":"impl Debug for Ast","synthetic":false,"types":[]},{"text":"impl Debug for Alternation","synthetic":false,"types":[]},{"text":"impl Debug for Concat","synthetic":false,"types":[]},{"text":"impl Debug for Literal","synthetic":false,"types":[]},{"text":"impl Debug for LiteralKind","synthetic":false,"types":[]},{"text":"impl Debug for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Debug for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Debug for Class","synthetic":false,"types":[]},{"text":"impl Debug for ClassPerl","synthetic":false,"types":[]},{"text":"impl Debug for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Debug for ClassAscii","synthetic":false,"types":[]},{"text":"impl Debug for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Debug for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Debug for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Debug for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Debug for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Debug for ClassSet","synthetic":false,"types":[]},{"text":"impl Debug for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Debug for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Debug for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Debug for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Debug for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Debug for Assertion","synthetic":false,"types":[]},{"text":"impl Debug for AssertionKind","synthetic":false,"types":[]},{"text":"impl Debug for Repetition","synthetic":false,"types":[]},{"text":"impl Debug for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Debug for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Debug for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Debug for Group","synthetic":false,"types":[]},{"text":"impl Debug for GroupKind","synthetic":false,"types":[]},{"text":"impl Debug for CaptureName","synthetic":false,"types":[]},{"text":"impl Debug for SetFlags","synthetic":false,"types":[]},{"text":"impl Debug for Flags","synthetic":false,"types":[]},{"text":"impl Debug for FlagsItem","synthetic":false,"types":[]},{"text":"impl Debug for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Debug for Flag","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Literals","synthetic":false,"types":[]},{"text":"impl Debug for Literal","synthetic":false,"types":[]},{"text":"impl Debug for Printer","synthetic":false,"types":[]},{"text":"impl Debug for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Debug for Translator","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for Hir","synthetic":false,"types":[]},{"text":"impl Debug for HirKind","synthetic":false,"types":[]},{"text":"impl Debug for Literal","synthetic":false,"types":[]},{"text":"impl Debug for Class","synthetic":false,"types":[]},{"text":"impl Debug for ClassUnicode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ClassUnicodeIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Debug for ClassBytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ClassBytesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Debug for Anchor","synthetic":false,"types":[]},{"text":"impl Debug for WordBoundary","synthetic":false,"types":[]},{"text":"impl Debug for Group","synthetic":false,"types":[]},{"text":"impl Debug for GroupKind","synthetic":false,"types":[]},{"text":"impl Debug for Repetition","synthetic":false,"types":[]},{"text":"impl Debug for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Debug for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Debug for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Debug for Parser","synthetic":false,"types":[]},{"text":"impl Debug for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Debug for UnicodeWordError","synthetic":false,"types":[]},{"text":"impl Debug for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Debug for Utf8Range","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N:&nbsp;Debug&gt; Debug for Point&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Debug&gt; Debug for Vector&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Line","synthetic":false,"types":[]},{"text":"impl Debug for Curve","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Debug&gt; Debug for Rect&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for FontCollection&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Debug for Font&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for SharedBytes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Codepoint","synthetic":false,"types":[]},{"text":"impl Debug for GlyphId","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Debug for Glyph&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl Debug for SharedGlyphData","synthetic":false,"types":[]},{"text":"impl Debug for HMetrics","synthetic":false,"types":[]},{"text":"impl Debug for VMetrics","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Debug for ScaledGlyph&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Debug for PositionedGlyph&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Scale","synthetic":false,"types":[]},{"text":"impl Debug for Segment","synthetic":false,"types":[]},{"text":"impl Debug for Contour","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["same_file"] = [{"text":"impl Debug for Handle","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Debug for Always","synthetic":false,"types":[]},{"text":"impl&lt;T, F, S&gt; Debug for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Debug&gt; Debug for StrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E:&nbsp;Debug&gt; Debug for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Debug&gt; Debug for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E:&nbsp;Debug&gt; Debug for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug, E:&nbsp;Debug&gt; Debug for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Debug for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Debug for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["shader_version"] = [{"text":"impl Debug for OpenGL","synthetic":false,"types":[]},{"text":"impl Debug for ParseOpenGLError","synthetic":false,"types":[]},{"text":"impl Debug for GLSL","synthetic":false,"types":[]},{"text":"impl Debug for ParseGLSLError","synthetic":false,"types":[]}];
implementors["shared_library"] = [{"text":"impl Debug for LoadingError","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Debug for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Debug for ModifiersState","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Mode","synthetic":false,"types":[]},{"text":"impl Debug for OutputInfo","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data:&nbsp;Debug + Deref&lt;Target = [u8]&gt;&gt; Debug for FontInfo&lt;Data&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Vertex","synthetic":false,"types":[]},{"text":"impl Debug for VertexType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Rect&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for HMetrics","synthetic":false,"types":[]},{"text":"impl Debug for VMetrics","synthetic":false,"types":[]},{"text":"impl Debug for PlatformId","synthetic":false,"types":[]},{"text":"impl Debug for UnicodeEid","synthetic":false,"types":[]},{"text":"impl Debug for MicrosoftEid","synthetic":false,"types":[]},{"text":"impl Debug for MacEid","synthetic":false,"types":[]},{"text":"impl Debug for MicrosoftLang","synthetic":false,"types":[]},{"text":"impl Debug for MacLang","synthetic":false,"types":[]},{"text":"impl Debug for PlatformEncodingLanguageId","synthetic":false,"types":[]},{"text":"impl&lt;'a, Data:&nbsp;Debug + Deref&lt;Target = [u8]&gt;&gt; Debug for FontNameIter&lt;'a, Data&gt;","synthetic":false,"types":[]}];
implementors["strsim"] = [{"text":"impl Debug for StrSimError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Debug for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Debug for ColorChoice","synthetic":false,"types":[]},{"text":"impl Debug for ColorSpec","synthetic":false,"types":[]},{"text":"impl Debug for Color","synthetic":false,"types":[]},{"text":"impl Debug for ParseColorError","synthetic":false,"types":[]}];
implementors["texture"] = [{"text":"impl Debug for Format","synthetic":false,"types":[]},{"text":"impl Debug for Filter","synthetic":false,"types":[]},{"text":"impl Debug for Wrap","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Debug for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Debug for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + WordSplitter&gt; Debug for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Debug + WordSplitter&gt; Debug for IntoWrapIter&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'w, 'a: 'w, S:&nbsp;Debug + WordSplitter + 'w&gt; Debug for WrapIter&lt;'w, 'a, S&gt;","synthetic":false,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;Send + Debug&gt; Debug for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Debug&gt; Debug for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Debug for Value","synthetic":false,"types":[]},{"text":"impl Debug for Entry","synthetic":false,"types":[]},{"text":"impl Debug for DecodingResult","synthetic":false,"types":[]},{"text":"impl Debug for Limits","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Debug&gt; Debug for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Read + Seek,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for TiffError","synthetic":false,"types":[]},{"text":"impl Debug for TiffFormatError","synthetic":false,"types":[]},{"text":"impl Debug for InflateError","synthetic":false,"types":[]},{"text":"impl Debug for TiffUnsupportedError","synthetic":false,"types":[]},{"text":"impl Debug for Tag","synthetic":false,"types":[]},{"text":"impl Debug for Type","synthetic":false,"types":[]},{"text":"impl Debug for CompressionMethod","synthetic":false,"types":[]},{"text":"impl Debug for PhotometricInterpretation","synthetic":false,"types":[]},{"text":"impl Debug for PlanarConfiguration","synthetic":false,"types":[]},{"text":"impl Debug for Predictor","synthetic":false,"types":[]},{"text":"impl Debug for ResolutionUnit","synthetic":false,"types":[]},{"text":"impl Debug for ColorType","synthetic":false,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl Debug for GraphemeIncomplete","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Debug&gt; Debug for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
implementors["viewport"] = [{"text":"impl Debug for Viewport","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Debug for Void","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Debug for DirEntry","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for WalkDir","synthetic":false,"types":[]},{"text":"impl Debug for IntoIter","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Debug, P:&nbsp;Debug&gt; Debug for FilterEntry&lt;I, P&gt;","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Debug for ConnectError","synthetic":false,"types":[]},{"text":"impl Debug for GlobalError","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Format","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for DndAction","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Resize","synthetic":false,"types":[]},{"text":"impl Debug for Transient","synthetic":false,"types":[]},{"text":"impl Debug for FullscreenMethod","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Capability","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ButtonState","synthetic":false,"types":[]},{"text":"impl Debug for Axis","synthetic":false,"types":[]},{"text":"impl Debug for AxisSource","synthetic":false,"types":[]},{"text":"impl Debug for KeymapFormat","synthetic":false,"types":[]},{"text":"impl Debug for KeyState","synthetic":false,"types":[]},{"text":"impl Debug for Subpixel","synthetic":false,"types":[]},{"text":"impl Debug for Transform","synthetic":false,"types":[]},{"text":"impl Debug for Mode","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Debug for ArgumentType","synthetic":false,"types":[]},{"text":"impl Debug for Argument","synthetic":false,"types":[]},{"text":"impl Debug for Message","synthetic":false,"types":[]},{"text":"impl Debug for MessageWriteError","synthetic":false,"types":[]},{"text":"impl Debug for MessageParseError","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Debug for Capability","synthetic":false,"types":[]},{"text":"impl Debug for PresentMethod","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Position","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Flags","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Lifetime","synthetic":false,"types":[]},{"text":"impl Debug for Type","synthetic":false,"types":[]},{"text":"impl Debug for Capability","synthetic":false,"types":[]},{"text":"impl Debug for ButtonState","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Type","synthetic":false,"types":[]},{"text":"impl Debug for Capability","synthetic":false,"types":[]},{"text":"impl Debug for ButtonState","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Source","synthetic":false,"types":[]},{"text":"impl Debug for Source","synthetic":false,"types":[]},{"text":"impl Debug for ButtonState","synthetic":false,"types":[]},{"text":"impl Debug for ContentHint","synthetic":false,"types":[]},{"text":"impl Debug for ContentPurpose","synthetic":false,"types":[]},{"text":"impl Debug for PreeditStyle","synthetic":false,"types":[]},{"text":"impl Debug for TextDirection","synthetic":false,"types":[]},{"text":"impl Debug for ChangeCause","synthetic":false,"types":[]},{"text":"impl Debug for ContentHint","synthetic":false,"types":[]},{"text":"impl Debug for ContentPurpose","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Mode","synthetic":false,"types":[]},{"text":"impl Debug for Version","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ResizeEdge","synthetic":false,"types":[]},{"text":"impl Debug for State","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Anchor","synthetic":false,"types":[]},{"text":"impl Debug for Gravity","synthetic":false,"types":[]},{"text":"impl Debug for ConstraintAdjustment","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ResizeEdge","synthetic":false,"types":[]},{"text":"impl Debug for State","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Flags","synthetic":false,"types":[]},{"text":"impl Debug for CancelReason","synthetic":false,"types":[]},{"text":"impl Debug for State","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Layer","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Anchor","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Flags","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Kind","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Anchor","synthetic":false,"types":[]},{"text":"impl Debug for Gravity","synthetic":false,"types":[]},{"text":"impl Debug for ConstraintAdjustment","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for ResizeEdge","synthetic":false,"types":[]},{"text":"impl Debug for State","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["weezl"] = [{"text":"impl Debug for LzwStatus","synthetic":false,"types":[]},{"text":"impl Debug for LzwError","synthetic":false,"types":[]}];
implementors["window"] = [{"text":"impl Debug for Size","synthetic":false,"types":[]},{"text":"impl Debug for Position","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Debug for LogicalPosition","synthetic":false,"types":[]},{"text":"impl Debug for PhysicalPosition","synthetic":false,"types":[]},{"text":"impl Debug for LogicalSize","synthetic":false,"types":[]},{"text":"impl Debug for PhysicalSize","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]},{"text":"impl Debug for WindowEvent","synthetic":false,"types":[]},{"text":"impl Debug for DeviceEvent","synthetic":false,"types":[]},{"text":"impl Debug for KeyboardInput","synthetic":false,"types":[]},{"text":"impl Debug for TouchPhase","synthetic":false,"types":[]},{"text":"impl Debug for Touch","synthetic":false,"types":[]},{"text":"impl Debug for ElementState","synthetic":false,"types":[]},{"text":"impl Debug for MouseButton","synthetic":false,"types":[]},{"text":"impl Debug for MouseScrollDelta","synthetic":false,"types":[]},{"text":"impl Debug for VirtualKeyCode","synthetic":false,"types":[]},{"text":"impl Debug for ModifiersState","synthetic":false,"types":[]},{"text":"impl Debug for BadIcon","synthetic":false,"types":[]},{"text":"impl Debug for Icon","synthetic":false,"types":[]},{"text":"impl Debug for XNotSupported","synthetic":false,"types":[]},{"text":"impl Debug for WindowType","synthetic":false,"types":[]},{"text":"impl Debug for AvailableMonitorsIter","synthetic":false,"types":[]},{"text":"impl Debug for MonitorId","synthetic":false,"types":[]},{"text":"impl Debug for Window","synthetic":false,"types":[]},{"text":"impl Debug for WindowId","synthetic":false,"types":[]},{"text":"impl Debug for DeviceId","synthetic":false,"types":[]},{"text":"impl Debug for EventsLoop","synthetic":false,"types":[]},{"text":"impl Debug for ControlFlow","synthetic":false,"types":[]},{"text":"impl Debug for EventsLoopProxy","synthetic":false,"types":[]},{"text":"impl Debug for EventsLoopClosed","synthetic":false,"types":[]},{"text":"impl Debug for WindowBuilder","synthetic":false,"types":[]},{"text":"impl Debug for CreationError","synthetic":false,"types":[]},{"text":"impl Debug for MouseCursor","synthetic":false,"types":[]},{"text":"impl Debug for WindowAttributes","synthetic":false,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Debug for OpenError","synthetic":false,"types":[]},{"text":"impl Debug for OpenErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for XEvent","synthetic":false,"types":[]},{"text":"impl Debug for XAnyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XButtonEvent","synthetic":false,"types":[]},{"text":"impl Debug for XCirculateEvent","synthetic":false,"types":[]},{"text":"impl Debug for XCirculateRequestEvent","synthetic":false,"types":[]},{"text":"impl Debug for XClientMessageEvent","synthetic":false,"types":[]},{"text":"impl Debug for XColormapEvent","synthetic":false,"types":[]},{"text":"impl Debug for XConfigureEvent","synthetic":false,"types":[]},{"text":"impl Debug for XConfigureRequestEvent","synthetic":false,"types":[]},{"text":"impl Debug for XCreateWindowEvent","synthetic":false,"types":[]},{"text":"impl Debug for XCrossingEvent","synthetic":false,"types":[]},{"text":"impl Debug for XDestroyWindowEvent","synthetic":false,"types":[]},{"text":"impl Debug for XErrorEvent","synthetic":false,"types":[]},{"text":"impl Debug for XExposeEvent","synthetic":false,"types":[]},{"text":"impl Debug for XFocusChangeEvent","synthetic":false,"types":[]},{"text":"impl Debug for XGraphicsExposeEvent","synthetic":false,"types":[]},{"text":"impl Debug for XGravityEvent","synthetic":false,"types":[]},{"text":"impl Debug for XKeyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XKeymapEvent","synthetic":false,"types":[]},{"text":"impl Debug for XMapEvent","synthetic":false,"types":[]},{"text":"impl Debug for XMappingEvent","synthetic":false,"types":[]},{"text":"impl Debug for XMapRequestEvent","synthetic":false,"types":[]},{"text":"impl Debug for XMotionEvent","synthetic":false,"types":[]},{"text":"impl Debug for XNoExposeEvent","synthetic":false,"types":[]},{"text":"impl Debug for XPropertyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XReparentEvent","synthetic":false,"types":[]},{"text":"impl Debug for XResizeRequestEvent","synthetic":false,"types":[]},{"text":"impl Debug for XSelectionClearEvent","synthetic":false,"types":[]},{"text":"impl Debug for XSelectionEvent","synthetic":false,"types":[]},{"text":"impl Debug for XSelectionRequestEvent","synthetic":false,"types":[]},{"text":"impl Debug for XUnmapEvent","synthetic":false,"types":[]},{"text":"impl Debug for XVisibilityEvent","synthetic":false,"types":[]},{"text":"impl Debug for _XkbDesc","synthetic":false,"types":[]},{"text":"impl Debug for _XkbKeyAliasRec","synthetic":false,"types":[]},{"text":"impl Debug for _XkbKeyNameRec","synthetic":false,"types":[]},{"text":"impl Debug for _XkbNamesRec","synthetic":false,"types":[]},{"text":"impl Debug for _XkbStateRec","synthetic":false,"types":[]},{"text":"impl Debug for XkbAnyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbNewKeyboardNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for _XkbMapNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbStateNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for _XkbControlsNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbIndicatorNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for _XkbNamesNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbCompatMapNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbBellNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbActionMessageEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbAccessXNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for _XkbExtensionDeviceNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XkbEvent","synthetic":false,"types":[]},{"text":"impl Debug for Depth","synthetic":false,"types":[]},{"text":"impl Debug for Screen","synthetic":false,"types":[]},{"text":"impl Debug for ScreenFormat","synthetic":false,"types":[]},{"text":"impl Debug for Visual","synthetic":false,"types":[]},{"text":"impl Debug for XArc","synthetic":false,"types":[]},{"text":"impl Debug for XChar2b","synthetic":false,"types":[]},{"text":"impl Debug for XCharStruct","synthetic":false,"types":[]},{"text":"impl Debug for XClassHint","synthetic":false,"types":[]},{"text":"impl Debug for XColor","synthetic":false,"types":[]},{"text":"impl Debug for XComposeStatus","synthetic":false,"types":[]},{"text":"impl Debug for XExtCodes","synthetic":false,"types":[]},{"text":"impl Debug for XFontProp","synthetic":false,"types":[]},{"text":"impl Debug for XFontSetExtents","synthetic":false,"types":[]},{"text":"impl Debug for XFontStruct","synthetic":false,"types":[]},{"text":"impl Debug for XGCValues","synthetic":false,"types":[]},{"text":"impl Debug for XGenericEventCookie","synthetic":false,"types":[]},{"text":"impl Debug for XHostAddress","synthetic":false,"types":[]},{"text":"impl Debug for XIconSize","synthetic":false,"types":[]},{"text":"impl Debug for XImage","synthetic":false,"types":[]},{"text":"impl Debug for XKeyboardControl","synthetic":false,"types":[]},{"text":"impl Debug for XKeyboardState","synthetic":false,"types":[]},{"text":"impl Debug for XmbTextItem","synthetic":false,"types":[]},{"text":"impl Debug for XModifierKeymap","synthetic":false,"types":[]},{"text":"impl Debug for XOMCharSetList","synthetic":false,"types":[]},{"text":"impl Debug for XPixmapFormatValues","synthetic":false,"types":[]},{"text":"impl Debug for XPoint","synthetic":false,"types":[]},{"text":"impl Debug for XRectangle","synthetic":false,"types":[]},{"text":"impl Debug for XrmOptionDescRec","synthetic":false,"types":[]},{"text":"impl Debug for XrmValue","synthetic":false,"types":[]},{"text":"impl Debug for XSegment","synthetic":false,"types":[]},{"text":"impl Debug for XSetWindowAttributes","synthetic":false,"types":[]},{"text":"impl Debug for XSizeHints","synthetic":false,"types":[]},{"text":"impl Debug for XStandardColormap","synthetic":false,"types":[]},{"text":"impl Debug for XTextItem","synthetic":false,"types":[]},{"text":"impl Debug for XTextItem16","synthetic":false,"types":[]},{"text":"impl Debug for XTextProperty","synthetic":false,"types":[]},{"text":"impl Debug for XTimeCoord","synthetic":false,"types":[]},{"text":"impl Debug for XVisualInfo","synthetic":false,"types":[]},{"text":"impl Debug for XwcTextItem","synthetic":false,"types":[]},{"text":"impl Debug for XWindowAttributes","synthetic":false,"types":[]},{"text":"impl Debug for XWindowChanges","synthetic":false,"types":[]},{"text":"impl Debug for XWMHints","synthetic":false,"types":[]},{"text":"impl Debug for XIMCaretDirection","synthetic":false,"types":[]},{"text":"impl Debug for XIMCaretStyle","synthetic":false,"types":[]},{"text":"impl Debug for XIMPreeditDrawCallbackStruct","synthetic":false,"types":[]},{"text":"impl Debug for XIMPreeditCaretCallbackStruct","synthetic":false,"types":[]},{"text":"impl Debug for AspectRatio","synthetic":false,"types":[]},{"text":"impl Debug for ClientMessageData","synthetic":false,"types":[]},{"text":"impl Debug for ImageFns","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorAnimate","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorChunkHeader","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorComment","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorComments","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorCursors","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorFile","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorFileHeader","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorFileToc","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorImage","synthetic":false,"types":[]},{"text":"impl Debug for _XcursorImages","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeGamma","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeModeInfo","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeModeLine","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeMonitor","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeSyncRange","synthetic":false,"types":[]},{"text":"impl Debug for XF86VidModeNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XftFont","synthetic":false,"types":[]},{"text":"impl Debug for XftColor","synthetic":false,"types":[]},{"text":"impl Debug for XftCharSpec","synthetic":false,"types":[]},{"text":"impl Debug for XftCharFontSpec","synthetic":false,"types":[]},{"text":"impl Debug for XftFontSet","synthetic":false,"types":[]},{"text":"impl Debug for XftGlyphSpec","synthetic":false,"types":[]},{"text":"impl Debug for XftGlyphFontSpec","synthetic":false,"types":[]},{"text":"impl Debug for XineramaScreenInfo","synthetic":false,"types":[]},{"text":"impl Debug for XPanoramiXInfo","synthetic":false,"types":[]},{"text":"impl Debug for XDevice","synthetic":false,"types":[]},{"text":"impl Debug for XDeviceControl","synthetic":false,"types":[]},{"text":"impl Debug for XDeviceInfo","synthetic":false,"types":[]},{"text":"impl Debug for XDeviceState","synthetic":false,"types":[]},{"text":"impl Debug for XDeviceTimeCoord","synthetic":false,"types":[]},{"text":"impl Debug for XExtensionVersion","synthetic":false,"types":[]},{"text":"impl Debug for XFeedbackControl","synthetic":false,"types":[]},{"text":"impl Debug for XFeedbackState","synthetic":false,"types":[]},{"text":"impl Debug for XInputClass","synthetic":false,"types":[]},{"text":"impl Debug for XInputClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIAddMasterInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIRemoveMasterInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIAttachSlaveInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIDetachSlaveInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIAnyHierarchyChangeInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIModifierState","synthetic":false,"types":[]},{"text":"impl Debug for XIButtonState","synthetic":false,"types":[]},{"text":"impl Debug for XIValuatorState","synthetic":false,"types":[]},{"text":"impl Debug for XIEventMask","synthetic":false,"types":[]},{"text":"impl Debug for XIAnyClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIButtonClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIKeyClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIValuatorClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIScrollClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XITouchClassInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIDeviceInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIGrabModifiers","synthetic":false,"types":[]},{"text":"impl Debug for XIBarrierReleasePointerInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIHierarchyInfo","synthetic":false,"types":[]},{"text":"impl Debug for XIHierarchyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIDeviceChangedEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIDeviceEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIRawEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIEnterEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIPropertyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XITouchOwnershipEvent","synthetic":false,"types":[]},{"text":"impl Debug for XIBarrierEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRecordClientInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRecordExtRange","synthetic":false,"types":[]},{"text":"impl Debug for XRecordInterceptData","synthetic":false,"types":[]},{"text":"impl Debug for XRecordRange","synthetic":false,"types":[]},{"text":"impl Debug for XRecordRange8","synthetic":false,"types":[]},{"text":"impl Debug for XRecordRange16","synthetic":false,"types":[]},{"text":"impl Debug for XRecordState","synthetic":false,"types":[]},{"text":"impl Debug for _XAnimCursor","synthetic":false,"types":[]},{"text":"impl Debug for _XCircle","synthetic":false,"types":[]},{"text":"impl Debug for _XConicalGradient","synthetic":false,"types":[]},{"text":"impl Debug for _XFilters","synthetic":false,"types":[]},{"text":"impl Debug for _XGlyphElt8","synthetic":false,"types":[]},{"text":"impl Debug for _XGlyphElt16","synthetic":false,"types":[]},{"text":"impl Debug for _XGlyphElt32","synthetic":false,"types":[]},{"text":"impl Debug for _XGlyphInfo","synthetic":false,"types":[]},{"text":"impl Debug for _XIndexValue","synthetic":false,"types":[]},{"text":"impl Debug for _XLinearGradient","synthetic":false,"types":[]},{"text":"impl Debug for _XLineFixed","synthetic":false,"types":[]},{"text":"impl Debug for _XPointDouble","synthetic":false,"types":[]},{"text":"impl Debug for _XPointFixed","synthetic":false,"types":[]},{"text":"impl Debug for _XRadialGradient","synthetic":false,"types":[]},{"text":"impl Debug for XRenderColor","synthetic":false,"types":[]},{"text":"impl Debug for XRenderDirectFormat","synthetic":false,"types":[]},{"text":"impl Debug for XRenderPictFormat","synthetic":false,"types":[]},{"text":"impl Debug for _XRenderPictureAttributes","synthetic":false,"types":[]},{"text":"impl Debug for _XSpanFix","synthetic":false,"types":[]},{"text":"impl Debug for _XTrap","synthetic":false,"types":[]},{"text":"impl Debug for _XTrapezoid","synthetic":false,"types":[]},{"text":"impl Debug for _XTriangle","synthetic":false,"types":[]},{"text":"impl Debug for _XTransform","synthetic":false,"types":[]},{"text":"impl Debug for XScreenSaverInfo","synthetic":false,"types":[]},{"text":"impl Debug for XScreenSaverNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRScreenSize","synthetic":false,"types":[]},{"text":"impl Debug for XRRModeInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRScreenResources","synthetic":false,"types":[]},{"text":"impl Debug for XRROutputInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRPropertyInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRCrtcInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRCrtcGamma","synthetic":false,"types":[]},{"text":"impl Debug for XRRCrtcTransformAttributes","synthetic":false,"types":[]},{"text":"impl Debug for XRRPanning","synthetic":false,"types":[]},{"text":"impl Debug for XRRProviderResources","synthetic":false,"types":[]},{"text":"impl Debug for XRRProviderInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRMonitorInfo","synthetic":false,"types":[]},{"text":"impl Debug for XRRScreenChangeNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRROutputChangeNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRCrtcChangeNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRROutputPropertyNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRProviderChangeNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRProviderPropertyNotifyEvent","synthetic":false,"types":[]},{"text":"impl Debug for XRRResourceChangeNotifyEvent","synthetic":false,"types":[]}];
implementors["xdg"] = [{"text":"impl Debug for BaseDirectories","synthetic":false,"types":[]},{"text":"impl Debug for BaseDirectoriesError","synthetic":false,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Debug for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for OwnedName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Attribute&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for OwnedAttribute","synthetic":false,"types":[]},{"text":"impl Debug for TextPosition","synthetic":false,"types":[]},{"text":"impl Debug for XmlVersion","synthetic":false,"types":[]},{"text":"impl Debug for Namespace","synthetic":false,"types":[]},{"text":"impl Debug for NamespaceStack","synthetic":false,"types":[]},{"text":"impl Debug for ParserConfig","synthetic":false,"types":[]},{"text":"impl Debug for XmlEvent","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]},{"text":"impl Debug for EmitterError","synthetic":false,"types":[]},{"text":"impl Debug for EmitterConfig","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for XmlEvent&lt;'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()